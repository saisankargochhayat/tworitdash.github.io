<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blogs By Me]]></title>
  <link href="http://tworitdash.github.io/atom.xml" rel="self"/>
  <link href="http://tworitdash.github.io/"/>
  <updated>2014-10-17T00:40:48+05:30</updated>
  <id>http://tworitdash.github.io/</id>
  <author>
    <name><![CDATA[Tworit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Class]]></title>
    <link href="http://tworitdash.github.io/blog/2014/10/16/ruby-class/"/>
    <updated>2014-10-16T20:04:06+05:30</updated>
    <id>http://tworitdash.github.io/blog/2014/10/16/ruby-class</id>
    <content type="html"><![CDATA[<p>This blog post is for the software zairza ruby class.</p>

<p>Unfortunately the classes that I have taken were not effective due to technical issues and power cuts. So through this blog I will explain everything.It&rsquo;s again raining.So let&rsquo;s hack some codes now.</p>

<p>Installation Procedure:</p>

<p>For installation in windows go to
<a href="http://rubyinstaller.org/">Ruby Installer</a> and download the 2.0.0 version. While installing allow the installer to set the path for you.In short tick the blank spaces while installing to set the path.</p>

<p>And after that open up your command line (cmd) by pressing the windows button and searching for cmd in the search bar.</p>

<p>And write</p>

<pre><code>ruby -v
</code></pre>

<p>in the cmd and Enter.</p>

<p>If you find something like this</p>

<pre><code>ruby 2.0.0p451 (2014-02-24 revision 45167)
</code></pre>

<p>Then it&rsquo;s perfectly fine.</p>

<p>If you are getting some error message like</p>

<pre><code>ruby: no internal or external command
</code></pre>

<p>Then reinstall it and tick all the path configuration stuffs while installing.</p>

<p>Or follow the instructions here.
<a href="http://www.tutorialspoint.com/ruby/ruby_installation_windows.htm">TutorialsPoint</a></p>

<p>For Debian based systems go to
<a href="http://www.sdjournal.com/posts/ruby-with-rbenv-on-debian.html">Ruby with rbenv</a> and follow the instructions to install ruby with rbenv.</p>

<p>Text Editor:</p>

<p>For a good text editor go to
<a href="http://sublimetext.com/2">sublimetext</a>
and download as per your OS and install it.</p>

<p>Then go to</p>

<p><a href="http://github.com/tworitdash/ruby-class">Ruby Class</a></p>

<p>and click on download zip at the right hand bottom. It will download a zip file of my class codes and from the zip file extract all the files.</p>

<p>Make sure that you have the files like</p>

<pre><code>1. add_and_power.rb
2. cars.rb
3. age.rb
4. blocks.rb
5. loop.rb
6. README.md
</code></pre>

<p>in a folder (ruby-class-master).</p>

<p>Save the folder in Desktop. (Do this for now. Save it in Desktop only)</p>

<p>Forget the README.md file for now.</p>

<p>People who have the folder already(from the class) also need to do this because I have modified the files a bit.</p>

<p>Then again hit your windows button and search for sublime editor (or any other code editor you have) and do the following from the left hand top.</p>

<p>file &ndash;> open file-> Then go to the folder ruby-class-master (where u saved after extracting) and open the add_and_power.rb file.</p>

<p>You can do it to all other files and view the codes in the text editor. I have explained everything in the code files using comment lines (lines starting with a #).</p>

<p>And if I have mentioned to uncomment some lines just remove the # and it will be done. And if you are modifying anything, don&rsquo;t forget to save the files.(ctrl + s)</p>

<p>Running the codes:</p>

<p>open up your cmd:
you will get something like this</p>

<pre><code>C:\Users\your_pc_name &gt;
</code></pre>

<p>This is the current path where your cmd is. Then you need to go to the folder ruby-class-master so that you can access the files.For that you need to change the directory. I will teach those later in detail but for now save the folder ruby-class-master in Desktop.</p>

<p>Then run the command in cmd</p>

<pre><code>cd Desktop/ruby-class-master
</code></pre>

<p>Then Enter and you can see the change like</p>

<pre><code>C:\Users\your_pc_name\Desktop\ruby-class-master &gt;
</code></pre>

<p>If this comes, you are now in the ruby-class-master folder and you can access all the ruby files from there. If you are getting some errors, let me know. :)</p>

<p>To run a file , for example add_and_power.rb file, you just write</p>

<pre><code>ruby add_and_power.rb
</code></pre>

<p>in the cmd and hit Enter and the code will be running and have fun. :)</p>

<p>You can do it to all other files.</p>

<p>Read all the comment lines in the codes. Those are pretty important and run the files to understand what is happening.</p>

<p>In the file blocks.rb I have mentioned nothing. This is a different concept called blocks and I want you guys to have a look at the code and run it. After running, gather the output. This is your task. In the next class, try to explain me why that output is there. Then I will introduce you to blocks, because it was difficult to write everything for blocks. If you are uncomfortable, then leave that blocks.rb file. We will discuss that in the next class.</p>

<p>Have fun guys and do let me know, if there is some trouble. I am always there. :)</p>

<p>Ask the doubts anywhere.</p>

<p>Mail Id is &ndash; <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#116;&#x77;&#x6f;&#x72;&#x69;&#116;&#x64;&#97;&#115;&#104;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;">&#116;&#119;&#x6f;&#x72;&#x69;&#x74;&#100;&#x61;&#x73;&#x68;&#x40;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;</a></p>

<p>Thanks !! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atom Bot With ARM Cortex M4]]></title>
    <link href="http://tworitdash.github.io/blog/2014/09/23/atom-bot-with-arm-cortex-m4/"/>
    <updated>2014-09-23T16:39:19+05:30</updated>
    <id>http://tworitdash.github.io/blog/2014/09/23/atom-bot-with-arm-cortex-m4</id>
    <content type="html"><![CDATA[<p>This is a new version of my atom-bot and I have used an ARM Cortex M4 (tm4c123g) microcontroller board.</p>

<p>The microcontroller has a clock speed of 80Mhz and it is a bit difficult to write code for it(as far as Arduino is concerned).</p>

<p>It is <a href="http://edx.org/">edx</a>, from which I learned how to use a texas ARM board. During the course, I got a sample code for the UART functions (universal asynchronous receiver and transmitter). And I modified it a bit for the tasks of my atom-bot.</p>

<p>The difficulty was with the OS. I love to work on linux, but to burn a program to the ARM, one has to use windows. So whenever I needed a modification in the microcontroller task, I had to switch on to windows :( . And my windows system is damn slow. Believe me, after using it for 2 or 3 days, you will probably prefer to die instead.</p>

<p>After burning the program to the microcontroller, it was easy for me to send serial commands from the raspberry pi. :) :) (Now everything can be done from any OS). And for obviuos reasons I used ubuntu for making a ssh connection to the raspberry pi and pi does its work from raspbian(debian for raspberry).</p>

<p>For obvious reasons :P !!! because I don&rsquo;t have a mac. :(</p>

<p>As mentioned in my first atom-bot blog, the ruby machine client is in the raspberry pi. And this machine client connects to the server and draws the commands that the browser client sends through websockets.</p>

<p>The codes are here</p>

<p><a href="http://github.com/tworitdash/atom-bot-with-arm-cortex/">atom-bot-with-arm-cortex</a></p>

<p><a href="http://keil.com/">Keil</a> is the IDE for the TIVA tm4c123g microcontroller. :)  :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Colour and Font Customizing]]></title>
    <link href="http://tworitdash.github.io/blog/2014/07/05/colour-and-font-customizing/"/>
    <updated>2014-07-05T20:44:36+05:30</updated>
    <id>http://tworitdash.github.io/blog/2014/07/05/colour-and-font-customizing</id>
    <content type="html"><![CDATA[<p>I have now changed my colour scheme and font by editing (by removing some comment lines) in <code>sass/custom/<em>styles.scss</code> , <code>sass/custom/</em>colors.scss </code> and <code>sass/custom/_fonts.scss</code>.</p>

<p>I referred to <a href="http://hslpicker.com/">this url</a> to pick suitable colors for my page and <a href="http://octopress.org/docs/theme/styles/">this blog</a> to get a good idea about how to change color scheme and style.</p>

<p>My color scheme has been changed and I am loving it. :) :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our Atom Bot]]></title>
    <link href="http://tworitdash.github.io/blog/2014/06/28/our-atom-bot/"/>
    <updated>2014-06-28T00:41:44+05:30</updated>
    <id>http://tworitdash.github.io/blog/2014/06/28/our-atom-bot</id>
    <content type="html"><![CDATA[<p>The name is inspired from <a href="http://realsteel.wikia.com/wiki/Atom">Real Steel</a>. This is just a prototype made using ruby libraries, <a href="http://www.arduino.cc/">arduino microcontroller</a> board and <a href="http://www.raspberrypi.org/">raspberry pi</a>. The idea is to control a system or hardware from anywhere around the globe by the help of internet. What are actually the ruby libraries and how do those help?</p>

<p>The concept is based on web-socket server. The server accepts websocket connections on some port (let it be 8080). The server is written by the help of em-websocket ruby. Clients are connected to it by opening the websocket connections at the same port. And as soon as a client is connected, it gets associated with a channel(internal channel). And when a client sends a message, it&rsquo;s pushed to that channel and after that the same message can be sent to all connected clients.</p>

<h2>PING PONG</h2>

<p>The ping-pong is the concept of receiving and sending messages. The browser clients are supported by the new versions of some browsers. In the javascript of that html page, we can connect to the server at the same port(8080). And it is then associated with callbacks like when a connection is made, when a new message is received and when the connection is closed. The messages here can be sent by clicking some buttons on that html page. Then along with the browser client, we can connect another client to the same channel which can receive the same message being sent by the browser client. How to send the same message to the serialport?</p>

<h2>SerialPort</h2>

<p>Here comes another ruby gem called the <a href="https://rubygems.org/gems/serialport">serialport</a>. This gem is built to use RS-232 serialports. In the client code we can also create a object of serialport. And by the help of that object we can send that same message(here it&rsquo;s only a single character like &lsquo;a&rsquo;) to the serialport. So now the other client can receive the message from the browser client through the websocket channel and send that to the serialport. Why to send that message (character) to the serialport?</p>

<h2>Arduino</h2>

<p><a href="http://www.arduino.cc/">Arduino</a> is a microcontroller board which has UART (universal asynchronous receiver and transmitter). This UART helps that board to receive the commands coming to it over the serialport. After getting the command(the command I am referring here is a character constant like &lsquo;a&rsquo;), it can process the output accordingly. How can it know what to perform while that exact command is received? It can all be written in the Arduino IDE and  uploaded to that board to do the required tasks. Isn&rsquo;t that awesome? Arduino has IO ports and with the help of those anything at the output can be connected.</p>

<h2>RaspberryPi</h2>

<p><a href="http://www.raspberrypi.org/">RaspberryPi</a> is a credit-card sized computer (linux based) which can be easily connected to the arduino through its serialport(USB) and it can be connected to the internet over wifi. This can be the device in which the client code can be executed. :) :)</p>

<h2>A Prototype</h2>

<p>We have made a prototype using the above libraries and the set of hardwares. We have connected  arduino with the pi through its serialport. And to the output of arduino, we have connected two motors (the motors are connected to two wheels) with a motor driver circuit. And now whenever we connect to the browser client we get a connection established. After that when the client is connected from the pi we can get our things done by clicking the buttons on that web-page. Along with that, in the browser client(in the javascript) we have included the code for accelerometer. Through this feature we can connect to the browser client with some device, having the accelerometer feature, and we can send messages to the other client by only tilting the device like a game. Isn&rsquo;t that fun?</p>

<iframe src="//player.vimeo.com/video/98682460" width="500" height="375" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p> <p><a href="http://vimeo.com/98682460">MOV_0089.mp4</a> from <a href="http://vimeo.com/user29276136">Tworit</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>

<p><img src="http://tworitdash.github.io/images/atom.jpg"></p>

<p>The source-code :</p>

<p><a href="https://github.com/sunu/atom-bot">atom-bot</a></p>

<h2>Utility</h2>

<p>This system can help us in many ways like</p>

<pre><code>1. We can automate our home like we can turn on our oven just before reaching home or we can check if the door is locked or not.
2. Security notifications can be sent as a app notification over the internet.
3. Can be used in hospitals and in traffic systems
</code></pre>

<p>And a lot of things can be developed with this. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customizing Octopress Pages]]></title>
    <link href="http://tworitdash.github.io/blog/2014/06/25/customizing-octopress-pages/"/>
    <updated>2014-06-25T22:42:43+05:30</updated>
    <id>http://tworitdash.github.io/blog/2014/06/25/customizing-octopress-pages</id>
    <content type="html"><![CDATA[<p>After creating a simple blogging site, let&rsquo;s now create some custom pages for our site like about and home pages.</p>

<p>Before that if you want to publish the blog page in your_url.com/blog instead of your_url.com and you just want your own index page at your_url.com, then just open up the Rakefile and edit the <code>blog_index_dir</code> to :</p>

<pre><code>1. blog_index_dir  = 'source/blog'
</code></pre>

<p>so that the blog page is now created at the your_url.com/blog.</p>

<p>To have your own page for the home, rake has another task for you called the <code>rake new_page</code>. If you are writing it as <code>bundle exec rake new_page[&ldquo;index.html&rdquo;]</code>, then it will create a index html page in that source directory.</p>

<p>so follow the command:</p>

<pre><code>1. bundle exec rake new_page["index.html"]
</code></pre>

<p>Then go and edit it as you like.</p>

<p>For an instance let us change the layout. make it something like :</p>

<pre><code>1. layout: home
</code></pre>

<p>Now we are telling the index.html file to follow the home layout. But we don&rsquo;t have any till now. So go to your <code> layouts </code> folder and create a home.html file and add whatever you like and if you want to include your own head, header and footer files in home.html then just create those files in <code>includes</code> folder and add the lines in home.html as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;html&gt;</span>
</span><span class='line'>  
</span><span class='line'>      {% include custom_head.html %}
</span><span class='line'>  
</span><span class='line'>      <span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'>              <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;any_class_in_your_css&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>              
</span><span class='line'>                  {% include custom_header.html %}
</span><span class='line'>          
</span><span class='line'>                  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;any_other-class&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>                  
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                      {{ content }}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                      {% include custom_footer.html %}
</span><span class='line'>
</span><span class='line'>                  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>              <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;/body&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/html&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>And add your stylesheets in the <code>stylesheets</code> folder. And write the content, as we do in the <code>_posts</code> files for the blogs, in the index.html file.</p>

<p>And your custom page is done. Make sure in the header the navigation bar is correctly coded like :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'>              
</span><span class='line'>              <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}/&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}/about&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}/blog&quot;</span><span class="nt">&gt;</span>Blog<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>               <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}/blog/archives/&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}/atom.xml&quot;</span><span class="nt">&gt;</span>RSS<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Same links should be provided in the <code>_includes/custom/navigation.html</code>(as the blog page has this navigation file embedded. ). Then all done to preview.</p>

<p>But notice that in the navigation file I added the second line to link to a about folder and that will show in the browser like <code>your_url.com/about</code>.</p>

<p>How to do this? It&rsquo;s much simpler than the first one.</p>

<pre><code>1. bundle exec rake new_page[about]
</code></pre>

<p>A page without any extension is created as index.html within the desired folder (here it&rsquo;s about).</p>

<p>Then just open that index file and do whatever you want to customize it.</p>

<p>And most importantly don&rsquo;t write the link for the home page as just <code>{{ root_url }} </code> in the navigation file and do write it as <code>{{ root_url }}/</code>, otherwise the link will point to the same page which is being opened up in the browser.</p>

<p>All is set now and just run the commands:</p>

<pre><code>1. bundle exec rake generate
2. bundle exec rake preview
3. bundle exec rake deploy
</code></pre>

<p>And all your codes are on the web now.</p>

<p>Open up your_url.com or your_url.github.io and have fun. :) :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging With Octopress and Deploying in Github]]></title>
    <link href="http://tworitdash.github.io/blog/2014/06/24/blogging-with-octopress-and-deploying-in-github/"/>
    <updated>2014-06-24T22:58:00+05:30</updated>
    <id>http://tworitdash.github.io/blog/2014/06/24/blogging-with-octopress-and-deploying-in-github</id>
    <content type="html"><![CDATA[<p>After a long and tiring hot day, finally it&rsquo;s raining here at Bhubaneswar. So let&rsquo;s hack some codes to make an awesome blogging site.</p>

<p>Do you feel the same as I feel about wordpress? If yes, then just get rid of it and use one of the best static page or blogging page generators called Octopress.And github provides an awesome online page generating option so that the codes can be pushed or deployed in github to share it on the web. :)</p>

<p>Steps:
Install ruby in your system (as octopress is based on ruby)</p>

<p><a href="http://www.tutorialspoint.com/ruby/ruby_installation_windows.htm">For windows</a></p>

<p><a href="http://www.sdjournal.com/posts/ruby-with-rbenv-on-debian.html">For ubtntu/debian</a></p>

<p>Using rbenv for ruby version and gem management is better in debian based operarting systems.</p>

<p>For mac users, there is no need to install ruby perhaps as they have it pre-installed.</p>

<p>Check by running either of the following.</p>

<pre><code>1. ruby -v
2. ruby --version
</code></pre>

<p>Now we are ready to go for the hack.Let&rsquo;s make a folder and clone the octopress github repo in that.You will need the <a href="http://git-scm.com/download/win">git command line or the git bash</a> for that in windows and for ubuntu or debian just <code>sudo apt-get install git</code> will do that same job.</p>

<pre><code>1. mkdir your_repo
2. cd your_repo
3. git clone git://github.com/imathis/octopress.git octopress
4. cd octopress
</code></pre>

<p>Now we are in the octopress directory and now we need to install all the ruby gems to perform our task. So we first need the bundler gem.</p>

<pre><code>1. gem install bundler
</code></pre>

<p>Not <code>sudo gem install bundler</code> as we are using rbenv for ruby.</p>

<p>Then while in that directory run</p>

<pre><code>1. bundle install
2. bundle exec rake install
</code></pre>

<p>The rake install command follows the rake task (install) and creates a group of files and folders in that octopress directory like <code>source</code> <code>public</code> etc and if you look into the source folder you can find the folder <code>_posts</code>(where all the blog markdown files are going to be saved).</p>

<p>Then for the basic configurations, open up the _config.yml file and set the things in that like ;</p>

<pre><code>1. url: http://yoursite.com
2. title: My First Dummy Blog
3. subtitle: 
4. author: Me 
5. simple_search: https://www.google.com/search
6. description: whatever !
</code></pre>

<p>All set !!! :)</p>

<p>Then let&rsquo;s create the first blog</p>

<pre><code>1. bundle exec rake new_post["your blog title"]
</code></pre>

<p>This rake task will create a markdown file in the <code>_posts</code> folder with the current date (/blog/year-month-date-title) as we see in general blogging sites.Open that file and you can see the page layout is &ldquo;post&rdquo; and I will explain how to make our own custom ones in my following blogs.</p>

<pre><code>---
1.  layout: post
2.  title: "Blogging with Octopress and deploying in Github"
3.  date: 2014-06-24 22:58:00 +0530
4.  comments: false
5.  categories:
----
</code></pre>

<p>Then insert your blog right below the &ndash; &ndash; &ndash; and save the file.</p>

<p>After that we can see the changes by running</p>

<pre><code>1. bundle exec rake generate
2. bundle exec rake preview
</code></pre>

<p>The preview task will create the page at port 4000 and to have a overview we can see it at <code>localhost:4000</code> in any browser.</p>

<p>Then stop that browser by running <code>ctrl+c</code> and we are done.</p>

<p><h2> Deploying in Github </h2></p>


<p>First we need to make a github account and make it verified through the email address(this has to be done to make github free pages live on the web).</p>

<p>Then we have to create a repo named <code>[username.github.io]</code></p>

<p>Then we have to run the following in CLI or Terminal.</p>

<pre><code>1. bundle exec rake setup_github_pages
</code></pre>

<p>It will ask for the github repo link and we have to write the url for that github repo.</p>

<p>Then just deploy the codes.</p>

<pre><code>1. bundle exec rake deploy
</code></pre>

<p>In this task the static pages that are generated in the <code>rake generate </code> command will be copied from the <code>public</code> folder to the <code>_deploy</code> folder and at the same time the codes will be pushed to the master branch of that github repo. It will ask your github user and password and after that it will be all done. Then refresh that repo and all the codes will be there. \o/</p>

<p>Then wait for 15 minutes and then open <code>username.github.io</code> and you will have your blog on the web.</p>

<p>Still not satisfied ?? Want to get rid of the <code>github.io</code> from your url?? Do you have your custom domain ?? If the answers to all of the above questions are yes,yes and yes then follow the steps below.</p>

<p><h2> Custom Domain </p>


<p></h2></p>

<p>Adding a CNAME file in the source directory will do the job.
.</p>

<pre><code>1. touch CNAME
</code></pre>

<p>Then open that file in any editor and add the url of your site.</p>

<pre><code>1. your_url.com
</code></pre>

<p>Then generate and deploy the codes and wait for 10 minutes. Then go to the github repo&rsquo;s right hand settings bar and scroll down a bit and you will be able to see in the github pages table the url of your site. [Your site is published at your_url.com]</p>

<p>Then go to your service provider or domain provider link and create a new A record in the &ldquo;DNS manage&rdquo; and come back to your CLI or Terminal and run the following.</p>

<pre><code>1. dig username.github.io +nostats +nocomments +nocmd
</code></pre>

<p>Then it will show up something like this.</p>

<pre><code>1. github.map.fastly.net.   17  IN  A   your_address
2. fastly.net.      *****   IN  NS  ns1.***.dynect.net.
3. fastly.net.      *****   IN  NS  ns2.***.dynect.net.
4. fastly.net.      *****   IN  NS  ns3.***.dynect.net.
4. fastly.net.      *****   IN  NS  ns4.***.dynect.net.
</code></pre>

<p>After that copy that <code>your_address</code> to the A record in that domain provider.</p>

<p>It&rsquo;s better if you create 2 records and name them as (your_url.com) and (www.your_url.com) and copy that address in both the records.</p>

<p>Then wait for about 15 minutes and then all done.</p>

<p>Your blog is now updated at your_url.com. \o/</p>

<p>Next I will show how to make custom pages using Octopress.</p>

<p>Sorry for the comment bar because I don&rsquo;t have that active now. Will fix that later on. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Met C.S.Lewis]]></title>
    <link href="http://tworitdash.github.io/blog/2014/06/22/how-i-met-c-dot-s-lewis/"/>
    <updated>2014-06-22T15:20:10+05:30</updated>
    <id>http://tworitdash.github.io/blog/2014/06/22/how-i-met-c-dot-s-lewis</id>
    <content type="html"><![CDATA[<p>After watching the three chronicles of Narnia, I was curiously driven to know more about the writer C.S. Lewis. If I knew about the series before, I would have read the books much earlier than the release date of the first movie. I was a bit late to start, but it turned out to be more interesting than expected. I am a kind of person who take interest in some things which are not so mainstream and not adorable. As far as childrens&#8217; fantasy is concerned, I believe in &lsquo;em to some extent. But to think of a pretty different world in a different universe, (with a complete set of new physical laws and or you can say a complete set of new Gods of creation) has grown an immense inquisitiveness within me and for that very reason I found the Narnian series to be the best fit for my childish ( if you can say it ) imaginations. Is our world round or we just imagine it to be? Whatever that is, I found a world which is triangular flat in my dreams and happened to notice that Narnia is also flat.</p>

<p>And who knows the shape of the world we live in? (&hellip; Bermuda Triangle is still a mystery &hellip;) Things, which are untrue and apocryphal (or we just think they are) often trouble us about their existance, because those are somehow parts of our possible imaginations. The thing that I am trying to convey is nothing is apocryphal as long as they are parts of our imaginations. From physicsist&rsquo;s point of view, if I consider, I can say those things or happenings belong to other parallel universes. But the thing that I had to focus on was “How to make a contact(physical, mental, over internet if you are ignorant of the keyword “parallel universes”) among those parallel universes ?” I think (genuinely) that I certainly found out the answer and I believe C.S. Lewis had got it much before me .!! :)</p>
]]></content>
  </entry>
  
</feed>
